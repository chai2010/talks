// Code generated by protoc-gen-go.
// source: hello.proto
// DO NOT EDIT!

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
*/
package hello

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

import "io"
import "log"
import "net"
import "net/rpc"
import "time"
import protorpc "github.com/chai2010/protorpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type HelloRequest struct {
	Msg              *string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}

func (m *HelloRequest) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

type HelloResponse struct {
	Msg              *string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}

func (m *HelloResponse) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func init() {
}

type HelloService interface {
	Hello(in *HelloRequest, out *HelloResponse) error
}

// AcceptHelloServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptHelloServiceClient(lis net.Listener, x HelloService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("HelloService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

// RegisterHelloService publish the given HelloService implementation on the server.
func RegisterHelloService(srv *rpc.Server, x HelloService) error {
	if err := srv.RegisterName("HelloService", x); err != nil {
		return err
	}
	return nil
}

// NewHelloServiceServer returns a new HelloService Server.
func NewHelloServiceServer(x HelloService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("HelloService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeHelloService listen announces on the local network address laddr
// and serves the given HelloService implementation.
func ListenAndServeHelloService(network, addr string, x HelloService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("HelloService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeCodec(protorpc.NewServerCodec(conn))
	}
}

type HelloServiceClient struct {
	*rpc.Client
}

// NewHelloServiceClient returns a HelloService rpc.Client and stub to handle
// requests to the set of HelloService at the other end of the connection.
func NewHelloServiceClient(conn io.ReadWriteCloser) (*HelloServiceClient, *rpc.Client) {
	c := rpc.NewClientWithCodec(protorpc.NewClientCodec(conn))
	return &HelloServiceClient{c}, c
}

func (c *HelloServiceClient) Hello(in *HelloRequest, out *HelloResponse) error {
	return c.Call("HelloService.Hello", in, out)
}

// DialHelloService connects to an HelloService at the specified network address.
func DialHelloService(network, addr string) (*HelloServiceClient, *rpc.Client, error) {
	c, err := protorpc.Dial(network, addr)
	if err != nil {
		return nil, nil, err
	}
	return &HelloServiceClient{c}, c, nil
}

// DialHelloServiceTimeout connects to an HelloService at the specified network address.
func DialHelloServiceTimeout(network, addr string,
	timeout time.Duration) (*HelloServiceClient, *rpc.Client, error) {
	c, err := protorpc.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, nil, err
	}
	return &HelloServiceClient{c}, c, nil
}
